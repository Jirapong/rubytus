#!/usr/bin/env ruby

require 'pathname'
bin = Pathname.new(__FILE__).realpath

ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../../Gemfile', bin)
ENV['RACK_ENV'] ||= ENV['TUSD_ENV'] || 'development'

require 'bundler'
Bundler.setup
Bundler.require(:default)

require 'rubytus/api'
require 'rubytus/error'
require 'rubytus/storage'
require 'rubytus/middlewares/tus_barrier'
require 'rubytus/middlewares/storage_barrier'

class API < Rubytus::API
  include Rubytus::Constants

  use Rubytus::Middlewares::TusBarrier
  use Rubytus::Middlewares::StorageBarrier

  def on_headers(env, headers)
    super(env, headers)

    request = Rubytus::Request.new(env)

    begin

      if env['api.action'] == :patch
        uid  = env['api.uid']
        info = storage.read_info(uid)

        validates_offset(request.offset, info.offset)
        validates_length(request.content_length, info.remaining_length)
      end

    rescue Rubytus::PermissionError => e
      error!(STATUS_INTERNAL_ERROR, e.message)
    end
  end

  def on_close(env)
    if env['api.action'] == :patch
      storage.patch_file(env['api.uid'], env['api.buffers'], env['api.offset'])
    end
  end

  def options_parser(opts, options)
    options = init_options.merge(options)
    default_parser(opts, options)
    opts.on('-f', '--data-dir DATA_DIR', "Directory to store uploads, LOCAL storage only (default: #{options[:data_dir]})") do |value|
      options[:data_dir] = value
    end
  end

  def init_options
    options = default_options
    options[:data_dir] = ENV[ENV_DATA_DIR] || DEFAULT_DATA_DIR
    options
  end

  def setup
    begin
      default_setup
      @options[:data_dir] = validate_data_dir(@options[:data_dir])
      @options[:storage]  = Rubytus::Storage.new(@options)
    rescue Rubytus::PermissionError, Rubytus::ConfigurationError => e
      puts '[ERROR] ' + e.message
      exit(1)
    end
  end

  private
  def storage
    @options[:storage]
  end

  def validate_data_dir(data_dir)
    if Pathname.new(data_dir).relative?
      data_dir = File.join(ENV['PWD'], data_dir)
    end

    begin
      unless File.directory?(data_dir)
        Dir.mkdir(data_dir)
      end
    rescue SystemCallError => _
      raise Rubytus::PermissionError, "Couldn't create `data_dir` in #{data_dir}"
    end

    unless File.world_writable?(data_dir)
      begin
        File.chmod(0777, data_dir)
      rescue Errno::EPERM
        raise Rubytus::PermissionError, "Couldn't make `data_dir` in #{data_dir} writable"
      end
    end

    data_dir
  end
end

